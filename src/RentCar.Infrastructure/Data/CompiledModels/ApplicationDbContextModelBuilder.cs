// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace RentCar.Infrastructure.Data.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var identityRole = IdentityRoleEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);
            var feedback = FeedbackEntityType.Create(this);
            var maintenance = MaintenanceEntityType.Create(this);
            var payment = PaymentEntityType.Create(this);
            var rental = RentalEntityType.Create(this);
            var vehicle = VehicleEntityType.Create(this);
            var applicationUser = ApplicationUserEntityType.Create(this);

            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, identityRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, applicationUser);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, applicationUser);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, identityRole);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, applicationUser);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, applicationUser);
            FeedbackEntityType.CreateForeignKey1(feedback, rental);
            MaintenanceEntityType.CreateForeignKey1(maintenance, vehicle);
            RentalEntityType.CreateForeignKey1(rental, payment);
            RentalEntityType.CreateForeignKey2(rental, applicationUser);
            RentalEntityType.CreateForeignKey3(rental, vehicle);

            IdentityRoleEntityType.CreateAnnotations(identityRole);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);
            FeedbackEntityType.CreateAnnotations(feedback);
            MaintenanceEntityType.CreateAnnotations(maintenance);
            PaymentEntityType.CreateAnnotations(payment);
            RentalEntityType.CreateAnnotations(rental);
            VehicleEntityType.CreateAnnotations(vehicle);
            ApplicationUserEntityType.CreateAnnotations(applicationUser);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.1");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var identityRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            identityRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var microsoftAspNetCoreIdentityIdentityRoleTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRole", null, relationalModel);
            var concurrency_stampColumnBase = new ColumnBase<ColumnMappingBase>("concurrency_stamp", "text", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("concurrency_stamp", concurrency_stampColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "text", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("name", nameColumnBase);
            var normalized_nameColumnBase = new ColumnBase<ColumnMappingBase>("normalized_name", "character varying(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("normalized_name", normalized_nameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRole", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleMappingBase = new TableMappingBase<ColumnMappingBase>(identityRole, microsoftAspNetCoreIdentityIdentityRoleTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleMappingBase, false);
            defaultTableMappings.Add(microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, identityRole.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrency_stampColumnBase, identityRole.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, identityRole.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_nameColumnBase, identityRole.FindProperty("NormalizedName")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);

            var tableMappings = new List<TableMapping>();
            identityRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var aspNetRolesTable = new Table("AspNetRoles", null, relationalModel);
            var idColumn = new Column("id", "text", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("id", idColumn);
            var concurrency_stampColumn = new Column("concurrency_stamp", "text", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("concurrency_stamp", concurrency_stampColumn);
            var nameColumn = new Column("name", "character varying(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("name", nameColumn);
            var normalized_nameColumn = new Column("normalized_name", "character varying(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("normalized_name", normalized_nameColumn);
            var pk_asp_net_roles = new UniqueConstraint("pk_asp_net_roles", aspNetRolesTable, new[] { idColumn });
            aspNetRolesTable.PrimaryKey = pk_asp_net_roles;
            var pk_asp_net_rolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            pk_asp_net_roles.MappedKeys.Add(pk_asp_net_rolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_rolesUc).Add(pk_asp_net_roles);
            aspNetRolesTable.UniqueConstraints.Add("pk_asp_net_roles", pk_asp_net_roles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalized_nameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", null), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(identityRole, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, identityRole.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrency_stampColumn, identityRole.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, identityRole.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalized_nameColumn, identityRole.FindProperty("NormalizedName")!, aspNetRolesTableMapping);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", null, relationalModel);
            var claim_typeColumnBase = new ColumnBase<ColumnMappingBase>("claim_type", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("claim_type", claim_typeColumnBase);
            var claim_valueColumnBase = new ColumnBase<ColumnMappingBase>("claim_value", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("claim_value", claim_valueColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "integer", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("id", idColumnBase0);
            var role_idColumnBase = new ColumnBase<ColumnMappingBase>("role_id", "text", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("role_id", role_idColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase, false);
            defaultTableMappings0.Add(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_typeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_valueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)role_idColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);

            var tableMappings0 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", null, relationalModel);
            var idColumn0 = new Column("id", "integer", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claim_typeColumn = new Column("claim_type", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("claim_type", claim_typeColumn);
            var claim_valueColumn = new Column("claim_value", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("claim_value", claim_valueColumn);
            var role_idColumn = new Column("role_id", "text", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("role_id", role_idColumn);
            var pk_asp_net_role_claims = new UniqueConstraint("pk_asp_net_role_claims", aspNetRoleClaimsTable, new[] { idColumn0 });
            aspNetRoleClaimsTable.PrimaryKey = pk_asp_net_role_claims;
            var pk_asp_net_role_claimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "Id" });
            pk_asp_net_role_claims.MappedKeys.Add(pk_asp_net_role_claimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_role_claimsUc).Add(pk_asp_net_role_claims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("pk_asp_net_role_claims", pk_asp_net_role_claims);
            var ix_asp_net_role_claims_role_id = new TableIndex(
            "ix_asp_net_role_claims_role_id", aspNetRoleClaimsTable, new[] { role_idColumn }, false);
            var ix_asp_net_role_claims_role_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" });
            ix_asp_net_role_claims_role_id.MappedIndexes.Add(ix_asp_net_role_claims_role_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_role_claims_role_idIx).Add(ix_asp_net_role_claims_role_id);
            aspNetRoleClaimsTable.Indexes.Add("ix_asp_net_role_claims_role_id", ix_asp_net_role_claims_role_id);
            relationalModel.Tables.Add(("AspNetRoleClaims", null), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings0.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_typeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_valueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(role_idColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", null, relationalModel);
            var claim_typeColumnBase0 = new ColumnBase<ColumnMappingBase>("claim_type", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("claim_type", claim_typeColumnBase0);
            var claim_valueColumnBase0 = new ColumnBase<ColumnMappingBase>("claim_value", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("claim_value", claim_valueColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("id", "integer", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("id", idColumnBase1);
            var user_idColumnBase = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("user_id", user_idColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase, false);
            defaultTableMappings1.Add(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_typeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claim_valueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);

            var tableMappings1 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", null, relationalModel);
            var idColumn1 = new Column("id", "integer", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("id", idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claim_typeColumn0 = new Column("claim_type", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("claim_type", claim_typeColumn0);
            var claim_valueColumn0 = new Column("claim_value", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("claim_value", claim_valueColumn0);
            var user_idColumn = new Column("user_id", "text", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("user_id", user_idColumn);
            var pk_asp_net_user_claims = new UniqueConstraint("pk_asp_net_user_claims", aspNetUserClaimsTable, new[] { idColumn1 });
            aspNetUserClaimsTable.PrimaryKey = pk_asp_net_user_claims;
            var pk_asp_net_user_claimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "Id" });
            pk_asp_net_user_claims.MappedKeys.Add(pk_asp_net_user_claimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_claimsUc).Add(pk_asp_net_user_claims);
            aspNetUserClaimsTable.UniqueConstraints.Add("pk_asp_net_user_claims", pk_asp_net_user_claims);
            var ix_asp_net_user_claims_user_id = new TableIndex(
            "ix_asp_net_user_claims_user_id", aspNetUserClaimsTable, new[] { user_idColumn }, false);
            var ix_asp_net_user_claims_user_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" });
            ix_asp_net_user_claims_user_id.MappedIndexes.Add(ix_asp_net_user_claims_user_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_user_claims_user_idIx).Add(ix_asp_net_user_claims_user_id);
            aspNetUserClaimsTable.Indexes.Add("ix_asp_net_user_claims_user_id", ix_asp_net_user_claims_user_id);
            relationalModel.Tables.Add(("AspNetUserClaims", null), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings1.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_typeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claim_valueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", null, relationalModel);
            var login_providerColumnBase = new ColumnBase<ColumnMappingBase>("login_provider", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("login_provider", login_providerColumnBase);
            var provider_display_nameColumnBase = new ColumnBase<ColumnMappingBase>("provider_display_name", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("provider_display_name", provider_display_nameColumnBase);
            var provider_keyColumnBase = new ColumnBase<ColumnMappingBase>("provider_key", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("provider_key", provider_keyColumnBase);
            var user_idColumnBase0 = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("user_id", user_idColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase, false);
            defaultTableMappings2.Add(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)login_providerColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provider_keyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provider_display_nameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase0, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);

            var tableMappings2 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", null, relationalModel);
            var login_providerColumn = new Column("login_provider", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("login_provider", login_providerColumn);
            var provider_keyColumn = new Column("provider_key", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("provider_key", provider_keyColumn);
            var provider_display_nameColumn = new Column("provider_display_name", "text", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("provider_display_name", provider_display_nameColumn);
            var user_idColumn0 = new Column("user_id", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("user_id", user_idColumn0);
            var pk_asp_net_user_logins = new UniqueConstraint("pk_asp_net_user_logins", aspNetUserLoginsTable, new[] { login_providerColumn, provider_keyColumn });
            aspNetUserLoginsTable.PrimaryKey = pk_asp_net_user_logins;
            var pk_asp_net_user_loginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "LoginProvider", "ProviderKey" });
            pk_asp_net_user_logins.MappedKeys.Add(pk_asp_net_user_loginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_loginsUc).Add(pk_asp_net_user_logins);
            aspNetUserLoginsTable.UniqueConstraints.Add("pk_asp_net_user_logins", pk_asp_net_user_logins);
            var ix_asp_net_user_logins_user_id = new TableIndex(
            "ix_asp_net_user_logins_user_id", aspNetUserLoginsTable, new[] { user_idColumn0 }, false);
            var ix_asp_net_user_logins_user_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" });
            ix_asp_net_user_logins_user_id.MappedIndexes.Add(ix_asp_net_user_logins_user_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_user_logins_user_idIx).Add(ix_asp_net_user_logins_user_id);
            aspNetUserLoginsTable.Indexes.Add("ix_asp_net_user_logins_user_id", ix_asp_net_user_logins_user_id);
            relationalModel.Tables.Add(("AspNetUserLogins", null), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings2.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(login_providerColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(provider_keyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(provider_display_nameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn0, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var microsoftAspNetCoreIdentityIdentityUserRolestringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", null, relationalModel);
            var role_idColumnBase0 = new ColumnBase<ColumnMappingBase>("role_id", "text", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("role_id", role_idColumnBase0);
            var user_idColumnBase1 = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("user_id", user_idColumnBase1);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRolestringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase, false);
            defaultTableMappings3.Add(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)role_idColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase1, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);

            var tableMappings3 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", null, relationalModel);
            var user_idColumn1 = new Column("user_id", "text", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("user_id", user_idColumn1);
            var role_idColumn0 = new Column("role_id", "text", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("role_id", role_idColumn0);
            var pk_asp_net_user_roles = new UniqueConstraint("pk_asp_net_user_roles", aspNetUserRolesTable, new[] { user_idColumn1, role_idColumn0 });
            aspNetUserRolesTable.PrimaryKey = pk_asp_net_user_roles;
            var pk_asp_net_user_rolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId", "RoleId" });
            pk_asp_net_user_roles.MappedKeys.Add(pk_asp_net_user_rolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_rolesUc).Add(pk_asp_net_user_roles);
            aspNetUserRolesTable.UniqueConstraints.Add("pk_asp_net_user_roles", pk_asp_net_user_roles);
            var ix_asp_net_user_roles_role_id = new TableIndex(
            "ix_asp_net_user_roles_role_id", aspNetUserRolesTable, new[] { role_idColumn0 }, false);
            var ix_asp_net_user_roles_role_idIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" });
            ix_asp_net_user_roles_role_id.MappedIndexes.Add(ix_asp_net_user_roles_role_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_asp_net_user_roles_role_idIx).Add(ix_asp_net_user_roles_role_id);
            aspNetUserRolesTable.Indexes.Add("ix_asp_net_user_roles_role_id", ix_asp_net_user_roles_role_id);
            relationalModel.Tables.Add(("AspNetUserRoles", null), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(identityUserRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings3.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(role_idColumn0, identityUserRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn1, identityUserRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", null, relationalModel);
            var login_providerColumnBase0 = new ColumnBase<ColumnMappingBase>("login_provider", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("login_provider", login_providerColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("name", nameColumnBase0);
            var user_idColumnBase2 = new ColumnBase<ColumnMappingBase>("user_id", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("user_id", user_idColumnBase2);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("value", "text", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase, false);
            defaultTableMappings4.Add(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)login_providerColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase2, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);

            var tableMappings4 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", null, relationalModel);
            var user_idColumn2 = new Column("user_id", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("user_id", user_idColumn2);
            var login_providerColumn0 = new Column("login_provider", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("login_provider", login_providerColumn0);
            var nameColumn0 = new Column("name", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("name", nameColumn0);
            var valueColumn = new Column("value", "text", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("value", valueColumn);
            var pk_asp_net_user_tokens = new UniqueConstraint("pk_asp_net_user_tokens", aspNetUserTokensTable, new[] { user_idColumn2, login_providerColumn0, nameColumn0 });
            aspNetUserTokensTable.PrimaryKey = pk_asp_net_user_tokens;
            var pk_asp_net_user_tokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId", "LoginProvider", "Name" });
            pk_asp_net_user_tokens.MappedKeys.Add(pk_asp_net_user_tokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_user_tokensUc).Add(pk_asp_net_user_tokens);
            aspNetUserTokensTable.UniqueConstraints.Add("pk_asp_net_user_tokens", pk_asp_net_user_tokens);
            relationalModel.Tables.Add(("AspNetUserTokens", null), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings4.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(login_providerColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn2, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);

            var feedback = FindEntityType("RentCar.Core.Entities.Feedback")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            feedback.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var rentCarCoreEntitiesFeedbackTableBase = new TableBase("RentCar.Core.Entities.Feedback", null, relationalModel);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("id", "uuid", rentCarCoreEntitiesFeedbackTableBase);
            rentCarCoreEntitiesFeedbackTableBase.Columns.Add("id", idColumnBase2);
            var is_approvedColumnBase = new ColumnBase<ColumnMappingBase>("is_approved", "boolean", rentCarCoreEntitiesFeedbackTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesFeedbackTableBase.Columns.Add("is_approved", is_approvedColumnBase);
            var messageColumnBase = new ColumnBase<ColumnMappingBase>("message", "character varying(255)", rentCarCoreEntitiesFeedbackTableBase);
            rentCarCoreEntitiesFeedbackTableBase.Columns.Add("message", messageColumnBase);
            var ratingColumnBase = new ColumnBase<ColumnMappingBase>("rating", "smallint", rentCarCoreEntitiesFeedbackTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesFeedbackTableBase.Columns.Add("rating", ratingColumnBase);
            var rental_idColumnBase = new ColumnBase<ColumnMappingBase>("rental_id", "uuid", rentCarCoreEntitiesFeedbackTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesFeedbackTableBase.Columns.Add("rental_id", rental_idColumnBase);
            relationalModel.DefaultTables.Add("RentCar.Core.Entities.Feedback", rentCarCoreEntitiesFeedbackTableBase);
            var rentCarCoreEntitiesFeedbackMappingBase = new TableMappingBase<ColumnMappingBase>(feedback, rentCarCoreEntitiesFeedbackTableBase, true);
            rentCarCoreEntitiesFeedbackTableBase.AddTypeMapping(rentCarCoreEntitiesFeedbackMappingBase, false);
            defaultTableMappings5.Add(rentCarCoreEntitiesFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, feedback.FindProperty("Id")!, rentCarCoreEntitiesFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_approvedColumnBase, feedback.FindProperty("IsApproved")!, rentCarCoreEntitiesFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase, feedback.FindProperty("Message")!, rentCarCoreEntitiesFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ratingColumnBase, feedback.FindProperty("Rating")!, rentCarCoreEntitiesFeedbackMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)rental_idColumnBase, feedback.FindProperty("RentalId")!, rentCarCoreEntitiesFeedbackMappingBase);

            var tableMappings5 = new List<TableMapping>();
            feedback.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var feedbacksTable = new Table("feedbacks", null, relationalModel);
            var idColumn2 = new Column("id", "uuid", feedbacksTable);
            feedbacksTable.Columns.Add("id", idColumn2);
            var is_approvedColumn = new Column("is_approved", "boolean", feedbacksTable)
            {
                IsNullable = true
            };
            feedbacksTable.Columns.Add("is_approved", is_approvedColumn);
            var messageColumn = new Column("message", "character varying(255)", feedbacksTable);
            feedbacksTable.Columns.Add("message", messageColumn);
            var ratingColumn = new Column("rating", "smallint", feedbacksTable)
            {
                IsNullable = true
            };
            feedbacksTable.Columns.Add("rating", ratingColumn);
            var rental_idColumn = new Column("rental_id", "uuid", feedbacksTable)
            {
                IsNullable = true
            };
            feedbacksTable.Columns.Add("rental_id", rental_idColumn);
            var pk_feedbacks = new UniqueConstraint("pk_feedbacks", feedbacksTable, new[] { idColumn2 });
            feedbacksTable.PrimaryKey = pk_feedbacks;
            var pk_feedbacksUc = RelationalModel.GetKey(this,
                "RentCar.Core.Entities.Feedback",
                new[] { "Id" });
            pk_feedbacks.MappedKeys.Add(pk_feedbacksUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_feedbacksUc).Add(pk_feedbacks);
            feedbacksTable.UniqueConstraints.Add("pk_feedbacks", pk_feedbacks);
            var ix_feedbacks_rental_id = new TableIndex(
            "ix_feedbacks_rental_id", feedbacksTable, new[] { rental_idColumn }, false);
            var ix_feedbacks_rental_idIx = RelationalModel.GetIndex(this,
                "RentCar.Core.Entities.Feedback",
                new[] { "RentalId" });
            ix_feedbacks_rental_id.MappedIndexes.Add(ix_feedbacks_rental_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_feedbacks_rental_idIx).Add(ix_feedbacks_rental_id);
            feedbacksTable.Indexes.Add("ix_feedbacks_rental_id", ix_feedbacks_rental_id);
            relationalModel.Tables.Add(("feedbacks", null), feedbacksTable);
            var feedbacksTableMapping = new TableMapping(feedback, feedbacksTable, true);
            feedbacksTable.AddTypeMapping(feedbacksTableMapping, false);
            tableMappings5.Add(feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, feedback.FindProperty("Id")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(is_approvedColumn, feedback.FindProperty("IsApproved")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn, feedback.FindProperty("Message")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(ratingColumn, feedback.FindProperty("Rating")!, feedbacksTableMapping);
            RelationalModel.CreateColumnMapping(rental_idColumn, feedback.FindProperty("RentalId")!, feedbacksTableMapping);

            var maintenance = FindEntityType("RentCar.Core.Entities.Maintenance")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            maintenance.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var rentCarCoreEntitiesMaintenanceTableBase = new TableBase("RentCar.Core.Entities.Maintenance", null, relationalModel);
            var costColumnBase = new ColumnBase<ColumnMappingBase>("cost", "numeric", rentCarCoreEntitiesMaintenanceTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesMaintenanceTableBase.Columns.Add("cost", costColumnBase);
            var dateColumnBase = new ColumnBase<ColumnMappingBase>("date", "timestamp with time zone", rentCarCoreEntitiesMaintenanceTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesMaintenanceTableBase.Columns.Add("date", dateColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("description", "character varying(255)", rentCarCoreEntitiesMaintenanceTableBase);
            rentCarCoreEntitiesMaintenanceTableBase.Columns.Add("description", descriptionColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("id", "uuid", rentCarCoreEntitiesMaintenanceTableBase);
            rentCarCoreEntitiesMaintenanceTableBase.Columns.Add("id", idColumnBase3);
            var vehicle_idColumnBase = new ColumnBase<ColumnMappingBase>("vehicle_id", "uuid", rentCarCoreEntitiesMaintenanceTableBase);
            rentCarCoreEntitiesMaintenanceTableBase.Columns.Add("vehicle_id", vehicle_idColumnBase);
            relationalModel.DefaultTables.Add("RentCar.Core.Entities.Maintenance", rentCarCoreEntitiesMaintenanceTableBase);
            var rentCarCoreEntitiesMaintenanceMappingBase = new TableMappingBase<ColumnMappingBase>(maintenance, rentCarCoreEntitiesMaintenanceTableBase, true);
            rentCarCoreEntitiesMaintenanceTableBase.AddTypeMapping(rentCarCoreEntitiesMaintenanceMappingBase, false);
            defaultTableMappings6.Add(rentCarCoreEntitiesMaintenanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, maintenance.FindProperty("Id")!, rentCarCoreEntitiesMaintenanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)costColumnBase, maintenance.FindProperty("Cost")!, rentCarCoreEntitiesMaintenanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateColumnBase, maintenance.FindProperty("Date")!, rentCarCoreEntitiesMaintenanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, maintenance.FindProperty("Description")!, rentCarCoreEntitiesMaintenanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vehicle_idColumnBase, maintenance.FindProperty("VehicleId")!, rentCarCoreEntitiesMaintenanceMappingBase);

            var tableMappings6 = new List<TableMapping>();
            maintenance.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var maintenancesTable = new Table("maintenances", null, relationalModel);
            var idColumn3 = new Column("id", "uuid", maintenancesTable);
            maintenancesTable.Columns.Add("id", idColumn3);
            var costColumn = new Column("cost", "numeric", maintenancesTable)
            {
                IsNullable = true
            };
            maintenancesTable.Columns.Add("cost", costColumn);
            var dateColumn = new Column("date", "timestamp with time zone", maintenancesTable)
            {
                IsNullable = true
            };
            maintenancesTable.Columns.Add("date", dateColumn);
            var descriptionColumn = new Column("description", "character varying(255)", maintenancesTable);
            maintenancesTable.Columns.Add("description", descriptionColumn);
            var vehicle_idColumn = new Column("vehicle_id", "uuid", maintenancesTable);
            maintenancesTable.Columns.Add("vehicle_id", vehicle_idColumn);
            var pk_maintenances = new UniqueConstraint("pk_maintenances", maintenancesTable, new[] { idColumn3 });
            maintenancesTable.PrimaryKey = pk_maintenances;
            var pk_maintenancesUc = RelationalModel.GetKey(this,
                "RentCar.Core.Entities.Maintenance",
                new[] { "Id" });
            pk_maintenances.MappedKeys.Add(pk_maintenancesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_maintenancesUc).Add(pk_maintenances);
            maintenancesTable.UniqueConstraints.Add("pk_maintenances", pk_maintenances);
            var ix_maintenances_vehicle_id = new TableIndex(
            "ix_maintenances_vehicle_id", maintenancesTable, new[] { vehicle_idColumn }, false);
            var ix_maintenances_vehicle_idIx = RelationalModel.GetIndex(this,
                "RentCar.Core.Entities.Maintenance",
                new[] { "VehicleId" });
            ix_maintenances_vehicle_id.MappedIndexes.Add(ix_maintenances_vehicle_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_maintenances_vehicle_idIx).Add(ix_maintenances_vehicle_id);
            maintenancesTable.Indexes.Add("ix_maintenances_vehicle_id", ix_maintenances_vehicle_id);
            relationalModel.Tables.Add(("maintenances", null), maintenancesTable);
            var maintenancesTableMapping = new TableMapping(maintenance, maintenancesTable, true);
            maintenancesTable.AddTypeMapping(maintenancesTableMapping, false);
            tableMappings6.Add(maintenancesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, maintenance.FindProperty("Id")!, maintenancesTableMapping);
            RelationalModel.CreateColumnMapping(costColumn, maintenance.FindProperty("Cost")!, maintenancesTableMapping);
            RelationalModel.CreateColumnMapping(dateColumn, maintenance.FindProperty("Date")!, maintenancesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, maintenance.FindProperty("Description")!, maintenancesTableMapping);
            RelationalModel.CreateColumnMapping(vehicle_idColumn, maintenance.FindProperty("VehicleId")!, maintenancesTableMapping);

            var payment = FindEntityType("RentCar.Core.Entities.Payment")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            payment.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var rentCarCoreEntitiesPaymentTableBase = new TableBase("RentCar.Core.Entities.Payment", null, relationalModel);
            var card_holder_nameColumnBase = new ColumnBase<ColumnMappingBase>("card_holder_name", "character varying(100)", rentCarCoreEntitiesPaymentTableBase);
            rentCarCoreEntitiesPaymentTableBase.Columns.Add("card_holder_name", card_holder_nameColumnBase);
            var card_numberColumnBase = new ColumnBase<ColumnMappingBase>("card_number", "character varying(19)", rentCarCoreEntitiesPaymentTableBase);
            rentCarCoreEntitiesPaymentTableBase.Columns.Add("card_number", card_numberColumnBase);
            var expiration_dateColumnBase = new ColumnBase<ColumnMappingBase>("expiration_date", "timestamp with time zone", rentCarCoreEntitiesPaymentTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesPaymentTableBase.Columns.Add("expiration_date", expiration_dateColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("id", "uuid", rentCarCoreEntitiesPaymentTableBase);
            rentCarCoreEntitiesPaymentTableBase.Columns.Add("id", idColumnBase4);
            var security_codeColumnBase = new ColumnBase<ColumnMappingBase>("security_code", "character varying(3)", rentCarCoreEntitiesPaymentTableBase);
            rentCarCoreEntitiesPaymentTableBase.Columns.Add("security_code", security_codeColumnBase);
            relationalModel.DefaultTables.Add("RentCar.Core.Entities.Payment", rentCarCoreEntitiesPaymentTableBase);
            var rentCarCoreEntitiesPaymentMappingBase = new TableMappingBase<ColumnMappingBase>(payment, rentCarCoreEntitiesPaymentTableBase, true);
            rentCarCoreEntitiesPaymentTableBase.AddTypeMapping(rentCarCoreEntitiesPaymentMappingBase, false);
            defaultTableMappings7.Add(rentCarCoreEntitiesPaymentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, payment.FindProperty("Id")!, rentCarCoreEntitiesPaymentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)card_holder_nameColumnBase, payment.FindProperty("CardHolderName")!, rentCarCoreEntitiesPaymentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)card_numberColumnBase, payment.FindProperty("CardNumber")!, rentCarCoreEntitiesPaymentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiration_dateColumnBase, payment.FindProperty("ExpirationDate")!, rentCarCoreEntitiesPaymentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)security_codeColumnBase, payment.FindProperty("SecurityCode")!, rentCarCoreEntitiesPaymentMappingBase);

            var tableMappings7 = new List<TableMapping>();
            payment.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var paymentsTable = new Table("payments", null, relationalModel);
            var idColumn4 = new Column("id", "uuid", paymentsTable);
            paymentsTable.Columns.Add("id", idColumn4);
            var card_holder_nameColumn = new Column("card_holder_name", "character varying(100)", paymentsTable);
            paymentsTable.Columns.Add("card_holder_name", card_holder_nameColumn);
            var card_numberColumn = new Column("card_number", "character varying(19)", paymentsTable);
            paymentsTable.Columns.Add("card_number", card_numberColumn);
            var expiration_dateColumn = new Column("expiration_date", "timestamp with time zone", paymentsTable)
            {
                IsNullable = true
            };
            paymentsTable.Columns.Add("expiration_date", expiration_dateColumn);
            var security_codeColumn = new Column("security_code", "character varying(3)", paymentsTable);
            paymentsTable.Columns.Add("security_code", security_codeColumn);
            var pk_payments = new UniqueConstraint("pk_payments", paymentsTable, new[] { idColumn4 });
            paymentsTable.PrimaryKey = pk_payments;
            var pk_paymentsUc = RelationalModel.GetKey(this,
                "RentCar.Core.Entities.Payment",
                new[] { "Id" });
            pk_payments.MappedKeys.Add(pk_paymentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_paymentsUc).Add(pk_payments);
            paymentsTable.UniqueConstraints.Add("pk_payments", pk_payments);
            relationalModel.Tables.Add(("payments", null), paymentsTable);
            var paymentsTableMapping = new TableMapping(payment, paymentsTable, true);
            paymentsTable.AddTypeMapping(paymentsTableMapping, false);
            tableMappings7.Add(paymentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, payment.FindProperty("Id")!, paymentsTableMapping);
            RelationalModel.CreateColumnMapping(card_holder_nameColumn, payment.FindProperty("CardHolderName")!, paymentsTableMapping);
            RelationalModel.CreateColumnMapping(card_numberColumn, payment.FindProperty("CardNumber")!, paymentsTableMapping);
            RelationalModel.CreateColumnMapping(expiration_dateColumn, payment.FindProperty("ExpirationDate")!, paymentsTableMapping);
            RelationalModel.CreateColumnMapping(security_codeColumn, payment.FindProperty("SecurityCode")!, paymentsTableMapping);

            var rental = FindEntityType("RentCar.Core.Entities.Rental")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            rental.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var rentCarCoreEntitiesRentalTableBase = new TableBase("RentCar.Core.Entities.Rental", null, relationalModel);
            var end_dateColumnBase = new ColumnBase<ColumnMappingBase>("end_date", "timestamp with time zone", rentCarCoreEntitiesRentalTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesRentalTableBase.Columns.Add("end_date", end_dateColumnBase);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("id", "uuid", rentCarCoreEntitiesRentalTableBase);
            rentCarCoreEntitiesRentalTableBase.Columns.Add("id", idColumnBase5);
            var payment_idColumnBase = new ColumnBase<ColumnMappingBase>("payment_id", "uuid", rentCarCoreEntitiesRentalTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesRentalTableBase.Columns.Add("payment_id", payment_idColumnBase);
            var start_dateColumnBase = new ColumnBase<ColumnMappingBase>("start_date", "timestamp with time zone", rentCarCoreEntitiesRentalTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesRentalTableBase.Columns.Add("start_date", start_dateColumnBase);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("status", "integer", rentCarCoreEntitiesRentalTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesRentalTableBase.Columns.Add("status", statusColumnBase);
            var total_priceColumnBase = new ColumnBase<ColumnMappingBase>("total_price", "numeric", rentCarCoreEntitiesRentalTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesRentalTableBase.Columns.Add("total_price", total_priceColumnBase);
            var user_idColumnBase3 = new ColumnBase<ColumnMappingBase>("user_id", "character varying(50)", rentCarCoreEntitiesRentalTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesRentalTableBase.Columns.Add("user_id", user_idColumnBase3);
            var vehicle_idColumnBase0 = new ColumnBase<ColumnMappingBase>("vehicle_id", "uuid", rentCarCoreEntitiesRentalTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesRentalTableBase.Columns.Add("vehicle_id", vehicle_idColumnBase0);
            relationalModel.DefaultTables.Add("RentCar.Core.Entities.Rental", rentCarCoreEntitiesRentalTableBase);
            var rentCarCoreEntitiesRentalMappingBase = new TableMappingBase<ColumnMappingBase>(rental, rentCarCoreEntitiesRentalTableBase, true);
            rentCarCoreEntitiesRentalTableBase.AddTypeMapping(rentCarCoreEntitiesRentalMappingBase, false);
            defaultTableMappings8.Add(rentCarCoreEntitiesRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, rental.FindProperty("Id")!, rentCarCoreEntitiesRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)end_dateColumnBase, rental.FindProperty("EndDate")!, rentCarCoreEntitiesRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)payment_idColumnBase, rental.FindProperty("PaymentId")!, rentCarCoreEntitiesRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)start_dateColumnBase, rental.FindProperty("StartDate")!, rentCarCoreEntitiesRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, rental.FindProperty("Status")!, rentCarCoreEntitiesRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)total_priceColumnBase, rental.FindProperty("TotalPrice")!, rentCarCoreEntitiesRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_idColumnBase3, rental.FindProperty("UserId")!, rentCarCoreEntitiesRentalMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vehicle_idColumnBase0, rental.FindProperty("VehicleId")!, rentCarCoreEntitiesRentalMappingBase);

            var tableMappings8 = new List<TableMapping>();
            rental.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var rentalsTable = new Table("rentals", null, relationalModel);
            var idColumn5 = new Column("id", "uuid", rentalsTable);
            rentalsTable.Columns.Add("id", idColumn5);
            var end_dateColumn = new Column("end_date", "timestamp with time zone", rentalsTable)
            {
                IsNullable = true
            };
            rentalsTable.Columns.Add("end_date", end_dateColumn);
            var payment_idColumn = new Column("payment_id", "uuid", rentalsTable)
            {
                IsNullable = true
            };
            rentalsTable.Columns.Add("payment_id", payment_idColumn);
            var start_dateColumn = new Column("start_date", "timestamp with time zone", rentalsTable)
            {
                IsNullable = true
            };
            rentalsTable.Columns.Add("start_date", start_dateColumn);
            var statusColumn = new Column("status", "integer", rentalsTable)
            {
                IsNullable = true
            };
            rentalsTable.Columns.Add("status", statusColumn);
            var total_priceColumn = new Column("total_price", "numeric", rentalsTable)
            {
                IsNullable = true
            };
            rentalsTable.Columns.Add("total_price", total_priceColumn);
            var user_idColumn3 = new Column("user_id", "character varying(50)", rentalsTable)
            {
                IsNullable = true
            };
            rentalsTable.Columns.Add("user_id", user_idColumn3);
            var vehicle_idColumn0 = new Column("vehicle_id", "uuid", rentalsTable)
            {
                IsNullable = true
            };
            rentalsTable.Columns.Add("vehicle_id", vehicle_idColumn0);
            var pk_rentals = new UniqueConstraint("pk_rentals", rentalsTable, new[] { idColumn5 });
            rentalsTable.PrimaryKey = pk_rentals;
            var pk_rentalsUc = RelationalModel.GetKey(this,
                "RentCar.Core.Entities.Rental",
                new[] { "Id" });
            pk_rentals.MappedKeys.Add(pk_rentalsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_rentalsUc).Add(pk_rentals);
            rentalsTable.UniqueConstraints.Add("pk_rentals", pk_rentals);
            var ix_rentals_payment_id = new TableIndex(
            "ix_rentals_payment_id", rentalsTable, new[] { payment_idColumn }, false);
            var ix_rentals_payment_idIx = RelationalModel.GetIndex(this,
                "RentCar.Core.Entities.Rental",
                new[] { "PaymentId" });
            ix_rentals_payment_id.MappedIndexes.Add(ix_rentals_payment_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_rentals_payment_idIx).Add(ix_rentals_payment_id);
            rentalsTable.Indexes.Add("ix_rentals_payment_id", ix_rentals_payment_id);
            var ix_rentals_user_id = new TableIndex(
            "ix_rentals_user_id", rentalsTable, new[] { user_idColumn3 }, false);
            var ix_rentals_user_idIx = RelationalModel.GetIndex(this,
                "RentCar.Core.Entities.Rental",
                new[] { "UserId" });
            ix_rentals_user_id.MappedIndexes.Add(ix_rentals_user_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_rentals_user_idIx).Add(ix_rentals_user_id);
            rentalsTable.Indexes.Add("ix_rentals_user_id", ix_rentals_user_id);
            var ix_rentals_vehicle_id = new TableIndex(
            "ix_rentals_vehicle_id", rentalsTable, new[] { vehicle_idColumn0 }, false);
            var ix_rentals_vehicle_idIx = RelationalModel.GetIndex(this,
                "RentCar.Core.Entities.Rental",
                new[] { "VehicleId" });
            ix_rentals_vehicle_id.MappedIndexes.Add(ix_rentals_vehicle_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_rentals_vehicle_idIx).Add(ix_rentals_vehicle_id);
            rentalsTable.Indexes.Add("ix_rentals_vehicle_id", ix_rentals_vehicle_id);
            relationalModel.Tables.Add(("rentals", null), rentalsTable);
            var rentalsTableMapping = new TableMapping(rental, rentalsTable, true);
            rentalsTable.AddTypeMapping(rentalsTableMapping, false);
            tableMappings8.Add(rentalsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, rental.FindProperty("Id")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(end_dateColumn, rental.FindProperty("EndDate")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(payment_idColumn, rental.FindProperty("PaymentId")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(start_dateColumn, rental.FindProperty("StartDate")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, rental.FindProperty("Status")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(total_priceColumn, rental.FindProperty("TotalPrice")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(user_idColumn3, rental.FindProperty("UserId")!, rentalsTableMapping);
            RelationalModel.CreateColumnMapping(vehicle_idColumn0, rental.FindProperty("VehicleId")!, rentalsTableMapping);

            var vehicle = FindEntityType("RentCar.Core.Entities.Vehicle")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            vehicle.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var rentCarCoreEntitiesVehicleTableBase = new TableBase("RentCar.Core.Entities.Vehicle", null, relationalModel);
            var brandColumnBase = new ColumnBase<ColumnMappingBase>("brand", "character varying(50)", rentCarCoreEntitiesVehicleTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesVehicleTableBase.Columns.Add("brand", brandColumnBase);
            var colorColumnBase = new ColumnBase<ColumnMappingBase>("color", "character varying(20)", rentCarCoreEntitiesVehicleTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesVehicleTableBase.Columns.Add("color", colorColumnBase);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("id", "uuid", rentCarCoreEntitiesVehicleTableBase);
            rentCarCoreEntitiesVehicleTableBase.Columns.Add("id", idColumnBase6);
            var imageColumnBase = new ColumnBase<ColumnMappingBase>("image", "character varying(255)", rentCarCoreEntitiesVehicleTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesVehicleTableBase.Columns.Add("image", imageColumnBase);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("name", "character varying(50)", rentCarCoreEntitiesVehicleTableBase);
            rentCarCoreEntitiesVehicleTableBase.Columns.Add("name", nameColumnBase1);
            var plateColumnBase = new ColumnBase<ColumnMappingBase>("plate", "character varying(10)", rentCarCoreEntitiesVehicleTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesVehicleTableBase.Columns.Add("plate", plateColumnBase);
            var statusColumnBase0 = new ColumnBase<ColumnMappingBase>("status", "integer", rentCarCoreEntitiesVehicleTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesVehicleTableBase.Columns.Add("status", statusColumnBase0);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("type", "integer", rentCarCoreEntitiesVehicleTableBase)
            {
                IsNullable = true
            };
            rentCarCoreEntitiesVehicleTableBase.Columns.Add("type", typeColumnBase);
            relationalModel.DefaultTables.Add("RentCar.Core.Entities.Vehicle", rentCarCoreEntitiesVehicleTableBase);
            var rentCarCoreEntitiesVehicleMappingBase = new TableMappingBase<ColumnMappingBase>(vehicle, rentCarCoreEntitiesVehicleTableBase, true);
            rentCarCoreEntitiesVehicleTableBase.AddTypeMapping(rentCarCoreEntitiesVehicleMappingBase, false);
            defaultTableMappings9.Add(rentCarCoreEntitiesVehicleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, vehicle.FindProperty("Id")!, rentCarCoreEntitiesVehicleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)brandColumnBase, vehicle.FindProperty("Brand")!, rentCarCoreEntitiesVehicleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)colorColumnBase, vehicle.FindProperty("Color")!, rentCarCoreEntitiesVehicleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageColumnBase, vehicle.FindProperty("Image")!, rentCarCoreEntitiesVehicleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, vehicle.FindProperty("Name")!, rentCarCoreEntitiesVehicleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)plateColumnBase, vehicle.FindProperty("Plate")!, rentCarCoreEntitiesVehicleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase0, vehicle.FindProperty("Status")!, rentCarCoreEntitiesVehicleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, vehicle.FindProperty("Type")!, rentCarCoreEntitiesVehicleMappingBase);

            var tableMappings9 = new List<TableMapping>();
            vehicle.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var vehiclesTable = new Table("vehicles", null, relationalModel);
            var idColumn6 = new Column("id", "uuid", vehiclesTable);
            vehiclesTable.Columns.Add("id", idColumn6);
            var brandColumn = new Column("brand", "character varying(50)", vehiclesTable)
            {
                IsNullable = true
            };
            vehiclesTable.Columns.Add("brand", brandColumn);
            var colorColumn = new Column("color", "character varying(20)", vehiclesTable)
            {
                IsNullable = true
            };
            vehiclesTable.Columns.Add("color", colorColumn);
            var imageColumn = new Column("image", "character varying(255)", vehiclesTable)
            {
                IsNullable = true
            };
            vehiclesTable.Columns.Add("image", imageColumn);
            var nameColumn1 = new Column("name", "character varying(50)", vehiclesTable);
            vehiclesTable.Columns.Add("name", nameColumn1);
            var plateColumn = new Column("plate", "character varying(10)", vehiclesTable)
            {
                IsNullable = true
            };
            vehiclesTable.Columns.Add("plate", plateColumn);
            var statusColumn0 = new Column("status", "integer", vehiclesTable)
            {
                IsNullable = true
            };
            vehiclesTable.Columns.Add("status", statusColumn0);
            var typeColumn = new Column("type", "integer", vehiclesTable)
            {
                IsNullable = true
            };
            vehiclesTable.Columns.Add("type", typeColumn);
            var pk_vehicles = new UniqueConstraint("pk_vehicles", vehiclesTable, new[] { idColumn6 });
            vehiclesTable.PrimaryKey = pk_vehicles;
            var pk_vehiclesUc = RelationalModel.GetKey(this,
                "RentCar.Core.Entities.Vehicle",
                new[] { "Id" });
            pk_vehicles.MappedKeys.Add(pk_vehiclesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_vehiclesUc).Add(pk_vehicles);
            vehiclesTable.UniqueConstraints.Add("pk_vehicles", pk_vehicles);
            relationalModel.Tables.Add(("vehicles", null), vehiclesTable);
            var vehiclesTableMapping = new TableMapping(vehicle, vehiclesTable, true);
            vehiclesTable.AddTypeMapping(vehiclesTableMapping, false);
            tableMappings9.Add(vehiclesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, vehicle.FindProperty("Id")!, vehiclesTableMapping);
            RelationalModel.CreateColumnMapping(brandColumn, vehicle.FindProperty("Brand")!, vehiclesTableMapping);
            RelationalModel.CreateColumnMapping(colorColumn, vehicle.FindProperty("Color")!, vehiclesTableMapping);
            RelationalModel.CreateColumnMapping(imageColumn, vehicle.FindProperty("Image")!, vehiclesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, vehicle.FindProperty("Name")!, vehiclesTableMapping);
            RelationalModel.CreateColumnMapping(plateColumn, vehicle.FindProperty("Plate")!, vehiclesTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn0, vehicle.FindProperty("Status")!, vehiclesTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, vehicle.FindProperty("Type")!, vehiclesTableMapping);

            var applicationUser = FindEntityType("RentCar.Core.Identity.ApplicationUser")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            applicationUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var rentCarCoreIdentityApplicationUserTableBase = new TableBase("RentCar.Core.Identity.ApplicationUser", null, relationalModel);
            var access_failed_countColumnBase = new ColumnBase<ColumnMappingBase>("access_failed_count", "integer", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("access_failed_count", access_failed_countColumnBase);
            var addressColumnBase = new ColumnBase<ColumnMappingBase>("address", "jsonb", rentCarCoreIdentityApplicationUserTableBase)
            {
                IsNullable = true
            };
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("address", addressColumnBase);
            var card_idColumnBase = new ColumnBase<ColumnMappingBase>("card_id", "character varying(12)", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("card_id", card_idColumnBase);
            var concurrency_stampColumnBase0 = new ColumnBase<ColumnMappingBase>("concurrency_stamp", "text", rentCarCoreIdentityApplicationUserTableBase)
            {
                IsNullable = true
            };
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("concurrency_stamp", concurrency_stampColumnBase0);
            var date_of_birthColumnBase = new ColumnBase<ColumnMappingBase>("date_of_birth", "date", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("date_of_birth", date_of_birthColumnBase);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("email", "character varying(256)", rentCarCoreIdentityApplicationUserTableBase)
            {
                IsNullable = true
            };
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("email", emailColumnBase);
            var email_confirmedColumnBase = new ColumnBase<ColumnMappingBase>("email_confirmed", "boolean", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("email_confirmed", email_confirmedColumnBase);
            var first_nameColumnBase = new ColumnBase<ColumnMappingBase>("first_name", "character varying(50)", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("first_name", first_nameColumnBase);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("id", "text", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("id", idColumnBase7);
            var last_nameColumnBase = new ColumnBase<ColumnMappingBase>("last_name", "character varying(20)", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("last_name", last_nameColumnBase);
            var license_idColumnBase = new ColumnBase<ColumnMappingBase>("license_id", "character varying(12)", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("license_id", license_idColumnBase);
            var license_typeColumnBase = new ColumnBase<ColumnMappingBase>("license_type", "integer", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("license_type", license_typeColumnBase);
            var lockout_enabledColumnBase = new ColumnBase<ColumnMappingBase>("lockout_enabled", "boolean", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("lockout_enabled", lockout_enabledColumnBase);
            var lockout_endColumnBase = new ColumnBase<ColumnMappingBase>("lockout_end", "timestamp with time zone", rentCarCoreIdentityApplicationUserTableBase)
            {
                IsNullable = true
            };
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("lockout_end", lockout_endColumnBase);
            var normalized_emailColumnBase = new ColumnBase<ColumnMappingBase>("normalized_email", "character varying(256)", rentCarCoreIdentityApplicationUserTableBase)
            {
                IsNullable = true
            };
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("normalized_email", normalized_emailColumnBase);
            var normalized_user_nameColumnBase = new ColumnBase<ColumnMappingBase>("normalized_user_name", "character varying(256)", rentCarCoreIdentityApplicationUserTableBase)
            {
                IsNullable = true
            };
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("normalized_user_name", normalized_user_nameColumnBase);
            var password_hashColumnBase = new ColumnBase<ColumnMappingBase>("password_hash", "text", rentCarCoreIdentityApplicationUserTableBase)
            {
                IsNullable = true
            };
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("password_hash", password_hashColumnBase);
            var phone_numberColumnBase = new ColumnBase<ColumnMappingBase>("phone_number", "text", rentCarCoreIdentityApplicationUserTableBase)
            {
                IsNullable = true
            };
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("phone_number", phone_numberColumnBase);
            var phone_number_confirmedColumnBase = new ColumnBase<ColumnMappingBase>("phone_number_confirmed", "boolean", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("phone_number_confirmed", phone_number_confirmedColumnBase);
            var security_stampColumnBase = new ColumnBase<ColumnMappingBase>("security_stamp", "text", rentCarCoreIdentityApplicationUserTableBase)
            {
                IsNullable = true
            };
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("security_stamp", security_stampColumnBase);
            var two_factor_enabledColumnBase = new ColumnBase<ColumnMappingBase>("two_factor_enabled", "boolean", rentCarCoreIdentityApplicationUserTableBase);
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("two_factor_enabled", two_factor_enabledColumnBase);
            var user_nameColumnBase = new ColumnBase<ColumnMappingBase>("user_name", "character varying(256)", rentCarCoreIdentityApplicationUserTableBase)
            {
                IsNullable = true
            };
            rentCarCoreIdentityApplicationUserTableBase.Columns.Add("user_name", user_nameColumnBase);
            relationalModel.DefaultTables.Add("RentCar.Core.Identity.ApplicationUser", rentCarCoreIdentityApplicationUserTableBase);
            var rentCarCoreIdentityApplicationUserMappingBase = new TableMappingBase<ColumnMappingBase>(applicationUser, rentCarCoreIdentityApplicationUserTableBase, true);
            rentCarCoreIdentityApplicationUserTableBase.AddTypeMapping(rentCarCoreIdentityApplicationUserMappingBase, false);
            defaultTableMappings10.Add(rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, applicationUser.FindProperty("Id")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)access_failed_countColumnBase, applicationUser.FindProperty("AccessFailedCount")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)addressColumnBase, applicationUser.FindProperty("Address")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)card_idColumnBase, applicationUser.FindProperty("CardId")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrency_stampColumnBase0, applicationUser.FindProperty("ConcurrencyStamp")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)date_of_birthColumnBase, applicationUser.FindProperty("DateOfBirth")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, applicationUser.FindProperty("Email")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)email_confirmedColumnBase, applicationUser.FindProperty("EmailConfirmed")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)first_nameColumnBase, applicationUser.FindProperty("FirstName")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)last_nameColumnBase, applicationUser.FindProperty("LastName")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)license_idColumnBase, applicationUser.FindProperty("LicenseId")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)license_typeColumnBase, applicationUser.FindProperty("LicenseType")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockout_enabledColumnBase, applicationUser.FindProperty("LockoutEnabled")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockout_endColumnBase, applicationUser.FindProperty("LockoutEnd")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_emailColumnBase, applicationUser.FindProperty("NormalizedEmail")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalized_user_nameColumnBase, applicationUser.FindProperty("NormalizedUserName")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)password_hashColumnBase, applicationUser.FindProperty("PasswordHash")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phone_numberColumnBase, applicationUser.FindProperty("PhoneNumber")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phone_number_confirmedColumnBase, applicationUser.FindProperty("PhoneNumberConfirmed")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)security_stampColumnBase, applicationUser.FindProperty("SecurityStamp")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)two_factor_enabledColumnBase, applicationUser.FindProperty("TwoFactorEnabled")!, rentCarCoreIdentityApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)user_nameColumnBase, applicationUser.FindProperty("UserName")!, rentCarCoreIdentityApplicationUserMappingBase);

            var tableMappings10 = new List<TableMapping>();
            applicationUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var aspNetUsersTable = new Table("AspNetUsers", null, relationalModel);
            var idColumn7 = new Column("id", "text", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("id", idColumn7);
            var access_failed_countColumn = new Column("access_failed_count", "integer", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("access_failed_count", access_failed_countColumn);
            var addressColumn = new Column("address", "jsonb", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("address", addressColumn);
            var card_idColumn = new Column("card_id", "character varying(12)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("card_id", card_idColumn);
            var concurrency_stampColumn0 = new Column("concurrency_stamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("concurrency_stamp", concurrency_stampColumn0);
            var date_of_birthColumn = new Column("date_of_birth", "date", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("date_of_birth", date_of_birthColumn);
            var emailColumn = new Column("email", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("email", emailColumn);
            var email_confirmedColumn = new Column("email_confirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("email_confirmed", email_confirmedColumn);
            var first_nameColumn = new Column("first_name", "character varying(50)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("first_name", first_nameColumn);
            var last_nameColumn = new Column("last_name", "character varying(20)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("last_name", last_nameColumn);
            var license_idColumn = new Column("license_id", "character varying(12)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("license_id", license_idColumn);
            var license_typeColumn = new Column("license_type", "integer", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("license_type", license_typeColumn);
            var lockout_enabledColumn = new Column("lockout_enabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("lockout_enabled", lockout_enabledColumn);
            var lockout_endColumn = new Column("lockout_end", "timestamp with time zone", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("lockout_end", lockout_endColumn);
            var normalized_emailColumn = new Column("normalized_email", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("normalized_email", normalized_emailColumn);
            var normalized_user_nameColumn = new Column("normalized_user_name", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("normalized_user_name", normalized_user_nameColumn);
            var password_hashColumn = new Column("password_hash", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("password_hash", password_hashColumn);
            var phone_numberColumn = new Column("phone_number", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("phone_number", phone_numberColumn);
            var phone_number_confirmedColumn = new Column("phone_number_confirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("phone_number_confirmed", phone_number_confirmedColumn);
            var security_stampColumn = new Column("security_stamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("security_stamp", security_stampColumn);
            var two_factor_enabledColumn = new Column("two_factor_enabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("two_factor_enabled", two_factor_enabledColumn);
            var user_nameColumn = new Column("user_name", "character varying(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("user_name", user_nameColumn);
            var pk_asp_net_users = new UniqueConstraint("pk_asp_net_users", aspNetUsersTable, new[] { idColumn7 });
            aspNetUsersTable.PrimaryKey = pk_asp_net_users;
            var pk_asp_net_usersUc = RelationalModel.GetKey(this,
                "RentCar.Core.Identity.ApplicationUser",
                new[] { "Id" });
            pk_asp_net_users.MappedKeys.Add(pk_asp_net_usersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_asp_net_usersUc).Add(pk_asp_net_users);
            aspNetUsersTable.UniqueConstraints.Add("pk_asp_net_users", pk_asp_net_users);
            var emailIndex = new TableIndex(
            "EmailIndex", aspNetUsersTable, new[] { normalized_emailColumn }, false);
            var emailIndexIx = RelationalModel.GetIndex(this,
                "RentCar.Core.Identity.ApplicationUser",
                new[] { "NormalizedEmail" });
            emailIndex.MappedIndexes.Add(emailIndexIx);
            RelationalModel.GetOrCreateTableIndexes(emailIndexIx).Add(emailIndex);
            aspNetUsersTable.Indexes.Add("EmailIndex", emailIndex);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalized_user_nameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "RentCar.Core.Identity.ApplicationUser",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", null), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(applicationUser, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings10.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, applicationUser.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(access_failed_countColumn, applicationUser.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(addressColumn, applicationUser.FindProperty("Address")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(card_idColumn, applicationUser.FindProperty("CardId")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrency_stampColumn0, applicationUser.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(date_of_birthColumn, applicationUser.FindProperty("DateOfBirth")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, applicationUser.FindProperty("Email")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(email_confirmedColumn, applicationUser.FindProperty("EmailConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(first_nameColumn, applicationUser.FindProperty("FirstName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(last_nameColumn, applicationUser.FindProperty("LastName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(license_idColumn, applicationUser.FindProperty("LicenseId")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(license_typeColumn, applicationUser.FindProperty("LicenseType")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockout_enabledColumn, applicationUser.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockout_endColumn, applicationUser.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalized_emailColumn, applicationUser.FindProperty("NormalizedEmail")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalized_user_nameColumn, applicationUser.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(password_hashColumn, applicationUser.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phone_numberColumn, applicationUser.FindProperty("PhoneNumber")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phone_number_confirmedColumn, applicationUser.FindProperty("PhoneNumberConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(security_stampColumn, applicationUser.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(two_factor_enabledColumn, applicationUser.FindProperty("TwoFactorEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(user_nameColumn, applicationUser.FindProperty("UserName")!, aspNetUsersTableMapping);
            var fk_asp_net_role_claims_asp_net_roles_role_id = new ForeignKeyConstraint(
                "fk_asp_net_role_claims_asp_net_roles_role_id", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { role_idColumn },
                aspNetRolesTable.FindUniqueConstraint("pk_asp_net_roles")!, ReferentialAction.Cascade);
            var fk_asp_net_role_claims_asp_net_roles_role_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fk_asp_net_role_claims_asp_net_roles_role_id.MappedForeignKeys.Add(fk_asp_net_role_claims_asp_net_roles_role_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_role_claims_asp_net_roles_role_idFk).Add(fk_asp_net_role_claims_asp_net_roles_role_id);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fk_asp_net_role_claims_asp_net_roles_role_id);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_role_claims_asp_net_roles_role_id);
            var fk_asp_net_user_claims_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_claims_asp_net_users_user_id", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { user_idColumn },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_claims_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" },
                "RentCar.Core.Identity.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_claims_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_claims_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_claims_asp_net_users_user_idFk).Add(fk_asp_net_user_claims_asp_net_users_user_id);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fk_asp_net_user_claims_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_claims_asp_net_users_user_id);
            var fk_asp_net_user_logins_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_logins_asp_net_users_user_id", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { user_idColumn0 },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_logins_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" },
                "RentCar.Core.Identity.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_logins_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_logins_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_logins_asp_net_users_user_idFk).Add(fk_asp_net_user_logins_asp_net_users_user_id);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fk_asp_net_user_logins_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_logins_asp_net_users_user_id);
            var fk_asp_net_user_roles_asp_net_roles_role_id = new ForeignKeyConstraint(
                "fk_asp_net_user_roles_asp_net_roles_role_id", aspNetUserRolesTable, aspNetRolesTable,
                new[] { role_idColumn0 },
                aspNetRolesTable.FindUniqueConstraint("pk_asp_net_roles")!, ReferentialAction.Cascade);
            var fk_asp_net_user_roles_asp_net_roles_role_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fk_asp_net_user_roles_asp_net_roles_role_id.MappedForeignKeys.Add(fk_asp_net_user_roles_asp_net_roles_role_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_roles_asp_net_roles_role_idFk).Add(fk_asp_net_user_roles_asp_net_roles_role_id);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_roles_role_id);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_roles_role_id);
            var fk_asp_net_user_roles_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_roles_asp_net_users_user_id", aspNetUserRolesTable, aspNetUsersTable,
                new[] { user_idColumn1 },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_roles_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId" },
                "RentCar.Core.Identity.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_roles_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_roles_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_roles_asp_net_users_user_idFk).Add(fk_asp_net_user_roles_asp_net_users_user_id);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_roles_asp_net_users_user_id);
            var fk_asp_net_user_tokens_asp_net_users_user_id = new ForeignKeyConstraint(
                "fk_asp_net_user_tokens_asp_net_users_user_id", aspNetUserTokensTable, aspNetUsersTable,
                new[] { user_idColumn2 },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.Cascade);
            var fk_asp_net_user_tokens_asp_net_users_user_idFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId" },
                "RentCar.Core.Identity.ApplicationUser",
                new[] { "Id" });
            fk_asp_net_user_tokens_asp_net_users_user_id.MappedForeignKeys.Add(fk_asp_net_user_tokens_asp_net_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_asp_net_user_tokens_asp_net_users_user_idFk).Add(fk_asp_net_user_tokens_asp_net_users_user_id);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fk_asp_net_user_tokens_asp_net_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_asp_net_user_tokens_asp_net_users_user_id);
            var fk_feedbacks_rentals_rental_id = new ForeignKeyConstraint(
                "fk_feedbacks_rentals_rental_id", feedbacksTable, rentalsTable,
                new[] { rental_idColumn },
                rentalsTable.FindUniqueConstraint("pk_rentals")!, ReferentialAction.SetNull);
            var fk_feedbacks_rentals_rental_idFk = RelationalModel.GetForeignKey(this,
                "RentCar.Core.Entities.Feedback",
                new[] { "RentalId" },
                "RentCar.Core.Entities.Rental",
                new[] { "Id" });
            fk_feedbacks_rentals_rental_id.MappedForeignKeys.Add(fk_feedbacks_rentals_rental_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_feedbacks_rentals_rental_idFk).Add(fk_feedbacks_rentals_rental_id);
            feedbacksTable.ForeignKeyConstraints.Add(fk_feedbacks_rentals_rental_id);
            rentalsTable.ReferencingForeignKeyConstraints.Add(fk_feedbacks_rentals_rental_id);
            var fk_maintenances_vehicles_vehicle_id = new ForeignKeyConstraint(
                "fk_maintenances_vehicles_vehicle_id", maintenancesTable, vehiclesTable,
                new[] { vehicle_idColumn },
                vehiclesTable.FindUniqueConstraint("pk_vehicles")!, ReferentialAction.SetNull);
            var fk_maintenances_vehicles_vehicle_idFk = RelationalModel.GetForeignKey(this,
                "RentCar.Core.Entities.Maintenance",
                new[] { "VehicleId" },
                "RentCar.Core.Entities.Vehicle",
                new[] { "Id" });
            fk_maintenances_vehicles_vehicle_id.MappedForeignKeys.Add(fk_maintenances_vehicles_vehicle_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_maintenances_vehicles_vehicle_idFk).Add(fk_maintenances_vehicles_vehicle_id);
            maintenancesTable.ForeignKeyConstraints.Add(fk_maintenances_vehicles_vehicle_id);
            vehiclesTable.ReferencingForeignKeyConstraints.Add(fk_maintenances_vehicles_vehicle_id);
            var fk_rentals_payments_payment_id = new ForeignKeyConstraint(
                "fk_rentals_payments_payment_id", rentalsTable, paymentsTable,
                new[] { payment_idColumn },
                paymentsTable.FindUniqueConstraint("pk_payments")!, ReferentialAction.SetNull);
            var fk_rentals_payments_payment_idFk = RelationalModel.GetForeignKey(this,
                "RentCar.Core.Entities.Rental",
                new[] { "PaymentId" },
                "RentCar.Core.Entities.Payment",
                new[] { "Id" });
            fk_rentals_payments_payment_id.MappedForeignKeys.Add(fk_rentals_payments_payment_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_rentals_payments_payment_idFk).Add(fk_rentals_payments_payment_id);
            rentalsTable.ForeignKeyConstraints.Add(fk_rentals_payments_payment_id);
            paymentsTable.ReferencingForeignKeyConstraints.Add(fk_rentals_payments_payment_id);
            var fk_rentals_users_user_id = new ForeignKeyConstraint(
                "fk_rentals_users_user_id", rentalsTable, aspNetUsersTable,
                new[] { user_idColumn3 },
                aspNetUsersTable.FindUniqueConstraint("pk_asp_net_users")!, ReferentialAction.SetNull);
            var fk_rentals_users_user_idFk = RelationalModel.GetForeignKey(this,
                "RentCar.Core.Entities.Rental",
                new[] { "UserId" },
                "RentCar.Core.Identity.ApplicationUser",
                new[] { "Id" });
            fk_rentals_users_user_id.MappedForeignKeys.Add(fk_rentals_users_user_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_rentals_users_user_idFk).Add(fk_rentals_users_user_id);
            rentalsTable.ForeignKeyConstraints.Add(fk_rentals_users_user_id);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fk_rentals_users_user_id);
            var fk_rentals_vehicles_vehicle_id = new ForeignKeyConstraint(
                "fk_rentals_vehicles_vehicle_id", rentalsTable, vehiclesTable,
                new[] { vehicle_idColumn0 },
                vehiclesTable.FindUniqueConstraint("pk_vehicles")!, ReferentialAction.SetNull);
            var fk_rentals_vehicles_vehicle_idFk = RelationalModel.GetForeignKey(this,
                "RentCar.Core.Entities.Rental",
                new[] { "VehicleId" },
                "RentCar.Core.Entities.Vehicle",
                new[] { "Id" });
            fk_rentals_vehicles_vehicle_id.MappedForeignKeys.Add(fk_rentals_vehicles_vehicle_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_rentals_vehicles_vehicle_idFk).Add(fk_rentals_vehicles_vehicle_id);
            rentalsTable.ForeignKeyConstraints.Add(fk_rentals_vehicles_vehicle_id);
            vehiclesTable.ReferencingForeignKeyConstraints.Add(fk_rentals_vehicles_vehicle_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
