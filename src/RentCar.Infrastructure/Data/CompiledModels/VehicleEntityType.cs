// <auto-generated />
using System;
using System.Reflection;
using Ardalis.SharedKernel;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;
using RentCar.Core.Entities;
using RentCar.Core.Enums;

#pragma warning disable 219, 612, 618
#nullable disable

namespace RentCar.Infrastructure.Data.CompiledModels
{
    internal partial class VehicleEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "RentCar.Core.Entities.Vehicle",
                typeof(Vehicle),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(EntityBase<Guid>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EntityBase<Guid>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "uuid"));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            id.AddAnnotation("Relational:ColumnName", "id");

            var brand = runtimeEntityType.AddProperty(
                "Brand",
                typeof(string),
                propertyInfo: typeof(Vehicle).GetProperty("Brand", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vehicle).GetField("<Brand>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            brand.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(50)",
                    size: 50));
            brand.TypeMapping = ((NpgsqlStringTypeMapping)brand.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        brand.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        brand.AddAnnotation("Relational:ColumnName", "brand");

        var color = runtimeEntityType.AddProperty(
            "Color",
            typeof(string),
            propertyInfo: typeof(Vehicle).GetProperty("Color", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Vehicle).GetField("<Color>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            nullable: true,
            maxLength: 20);
        color.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            keyComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "character varying(20)",
                size: 20));
        color.TypeMapping = ((NpgsqlStringTypeMapping)color.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    color.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    color.AddAnnotation("Relational:ColumnName", "color");

    var image = runtimeEntityType.AddProperty(
        "Image",
        typeof(string),
        propertyInfo: typeof(Vehicle).GetProperty("Image", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Vehicle).GetField("<Image>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        nullable: true,
        maxLength: 255);
    image.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
        comparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        keyComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        providerValueComparer: new ValueComparer<string>(
            (string v1, string v2) => v1 == v2,
            (string v) => v.GetHashCode(),
            (string v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "character varying(255)",
            size: 255));
    image.TypeMapping = ((NpgsqlStringTypeMapping)image.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
image.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
image.AddAnnotation("Relational:ColumnName", "image");

var name = runtimeEntityType.AddProperty(
    "Name",
    typeof(string),
    propertyInfo: typeof(Vehicle).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Vehicle).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    maxLength: 50);
name.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(50)",
        size: 50));
name.TypeMapping = ((NpgsqlStringTypeMapping)name.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
name.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
name.AddAnnotation("Relational:ColumnName", "name");

var plate = runtimeEntityType.AddProperty(
    "Plate",
    typeof(string),
    propertyInfo: typeof(Vehicle).GetProperty("Plate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Vehicle).GetField("<Plate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true,
    maxLength: 10);
plate.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
    comparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    keyComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    providerValueComparer: new ValueComparer<string>(
        (string v1, string v2) => v1 == v2,
        (string v) => v.GetHashCode(),
        (string v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "character varying(10)",
        size: 10));
plate.TypeMapping = ((NpgsqlStringTypeMapping)plate.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
plate.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
plate.AddAnnotation("Relational:ColumnName", "plate");

var status = runtimeEntityType.AddProperty(
    "Status",
    typeof(CarStatus?),
    propertyInfo: typeof(Vehicle).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Vehicle).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
status.TypeMapping = IntTypeMapping.Default.Clone(
    comparer: new ValueComparer<CarStatus?>(
        (Nullable<CarStatus> v1, Nullable<CarStatus> v2) => v1.HasValue && v2.HasValue && object.Equals((object)(CarStatus)v1, (object)(CarStatus)v2) || !v1.HasValue && !v2.HasValue,
        (Nullable<CarStatus> v) => v.HasValue ? ((CarStatus)v).GetHashCode() : 0,
        (Nullable<CarStatus> v) => v.HasValue ? (Nullable<CarStatus>)(CarStatus)v : default(Nullable<CarStatus>)),
    keyComparer: new ValueComparer<CarStatus?>(
        (Nullable<CarStatus> v1, Nullable<CarStatus> v2) => v1.HasValue && v2.HasValue && object.Equals((object)(CarStatus)v1, (object)(CarStatus)v2) || !v1.HasValue && !v2.HasValue,
        (Nullable<CarStatus> v) => v.HasValue ? ((CarStatus)v).GetHashCode() : 0,
        (Nullable<CarStatus> v) => v.HasValue ? (Nullable<CarStatus>)(CarStatus)v : default(Nullable<CarStatus>)),
    providerValueComparer: new ValueComparer<int>(
        (int v1, int v2) => v1 == v2,
        (int v) => v,
        (int v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "integer"),
    converter: new ValueConverter<CarStatus, int>(
        (CarStatus value) => (int)value,
        (int value) => (CarStatus)value),
    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CarStatus, int>(
        JsonInt32ReaderWriter.Instance,
        new ValueConverter<CarStatus, int>(
            (CarStatus value) => (int)value,
            (int value) => (CarStatus)value)));
status.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
status.AddAnnotation("Relational:ColumnName", "status");

var type = runtimeEntityType.AddProperty(
    "Type",
    typeof(VehicleType?),
    propertyInfo: typeof(Vehicle).GetProperty("Type", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    fieldInfo: typeof(Vehicle).GetField("<Type>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
    nullable: true);
type.TypeMapping = IntTypeMapping.Default.Clone(
    comparer: new ValueComparer<VehicleType?>(
        (Nullable<VehicleType> v1, Nullable<VehicleType> v2) => v1.HasValue && v2.HasValue && object.Equals((object)(VehicleType)v1, (object)(VehicleType)v2) || !v1.HasValue && !v2.HasValue,
        (Nullable<VehicleType> v) => v.HasValue ? ((VehicleType)v).GetHashCode() : 0,
        (Nullable<VehicleType> v) => v.HasValue ? (Nullable<VehicleType>)(VehicleType)v : default(Nullable<VehicleType>)),
    keyComparer: new ValueComparer<VehicleType?>(
        (Nullable<VehicleType> v1, Nullable<VehicleType> v2) => v1.HasValue && v2.HasValue && object.Equals((object)(VehicleType)v1, (object)(VehicleType)v2) || !v1.HasValue && !v2.HasValue,
        (Nullable<VehicleType> v) => v.HasValue ? ((VehicleType)v).GetHashCode() : 0,
        (Nullable<VehicleType> v) => v.HasValue ? (Nullable<VehicleType>)(VehicleType)v : default(Nullable<VehicleType>)),
    providerValueComparer: new ValueComparer<int>(
        (int v1, int v2) => v1 == v2,
        (int v) => v,
        (int v) => v),
    mappingInfo: new RelationalTypeMappingInfo(
        storeTypeName: "integer"),
    converter: new ValueConverter<VehicleType, int>(
        (VehicleType value) => (int)value,
        (int value) => (VehicleType)value),
    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<VehicleType, int>(
        JsonInt32ReaderWriter.Instance,
        new ValueConverter<VehicleType, int>(
            (VehicleType value) => (int)value,
            (int value) => (VehicleType)value)));
type.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
type.AddAnnotation("Relational:ColumnName", "type");

var key = runtimeEntityType.AddKey(
    new[] { id });
runtimeEntityType.SetPrimaryKey(key);
key.AddAnnotation("Relational:Name", "pk_vehicles");

return runtimeEntityType;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "vehicles");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}
